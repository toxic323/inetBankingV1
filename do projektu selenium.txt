https://demo.guru99.com/V4/
User ID :	mngr401326
Password :	zazAsyh

Jenkins

toxicnoiz12345@interia.pl


https://github.com/toxic323/inetBankingV1.git

clear
git init	->create an empty git repository (local!!!!!!!!!!)
git remote add origin "https://github.com/toxic323/inetBankingV1.git" -> add remote respository to github`
git config --global user.name "bartek"  -> set name
git config --global user.email "toxicnoiz12345@interia.pl" -> set email
git push [np. origin] --delete [nazwa brancha] -> delete remote branch 

git branch      	->list out branch
git branch <nazwa> 	-> create a new branch 
git checkout <nazwa_brancha>  ->switch a branch
git checkout -b <nazwa_brancha>  ->robi brancha z aktualnego stanu plikow i przelacza na niego
git branch -d <nazwa brancha> - usuwanie brancha

git status 	->what are files ready to commit in git repository
git log 			-> historia commitów (wyjscie q)
git log --oneline               -> oneline

git add -A     			 -> add all files into STAGE
git commit -m "xxx"       	 ->commit to local repository, -m (to message) ; -am (robi add i potem message do commita)
git push -u [origin] [master]	->pushing files git-------->github  ;
git pull [origin] [master]	->pulling files github-------->git
git merge [branchname]          -> robiby heada na brancha DO KTREGO chcemy dołaczyć
git reset --hard [commit hash]   -> usuna wszystko powyzej commit hash !!!!!!!! BEZPOWROTNIE !!!!!!!!!!!!!
git revert                     ->cofasz do danego commita, jednoczesnie wykonujac commita
git clone [link] 		-> klonujesz repozytorium
git pull --rebase 		->zaciagamy aktualne repo ( jak mamy committy niespushowane jeszcze , to beda na gorze)

Jezeli chce dodac nowego brancha z kodem do githuba to [remote add <nazwabrancha> "https..."] i potem [push]
przelaczajac sie pomiedzy branchami zmienia mi sie aktualny stan plików


.gitignore - pliki ktore ma ignorowac git

1user wprowadza commit i pushuje
2user wprowadza commit i chce push, ale wyskakuje mu ze w remote sa jakies zmiany, ktorych nie ma lokalnie i musi zrobic pull
2user robi pull, ale wyskakuje mu ze ma conflict 





SQL

INSERT INTO Customers (CustomerName, ContactName) VALUES 
('Cardinal', 'Tom B. Erichsen'), 
('Skagen 21', 'Stavanger'),
('Cardinal', 'Tom B. Erichsen');

UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
DELETE FROM Customers;

DROP TABLE Customers;

SELECT COUNT(username) FROM Customers;	
SELECT MIN(year_of_birth) FROM Customers;
SELECT MAX(year_of_birth) FROM Customers;
SELECT SUM(year_of_birth) FROM Customers;	
SELECT AVG(year_of_birth) FROM Customers;				
SELECT username AS imie FROM Customers WHERE year_of_birth = 1988 OR year_of_birth = 1989;
SELECT username FROM Customers WHERE year_of_birth = 1988 AND display_name = 'Adam';
SELECT username FROM Customers WHERE year_of_birth IS NOT NULL;                
SELECT username FROM Customers WHERE year_of_birth IN (1992,1995,1972);       The IN operator is a shorthand for multiple OR conditions.
SELECT username FROM Customers WHERE year_of_birth BETWEEN 1980 AND 1990;
SELECT username FROM Customers WHERE username LIKE '%am%'               	%oznacza cokolwiek(bez znaczenia ilosc znakow)
SELECT username FROM Customers WHERE username NOT LIKE 'k%'				'a%o' oznacza zaczyna sie na 'a' i koniczy sie na 'o'
SELECT username FROM Customers WHERE username LIKE '2__%' 	               Finds any values that start with "2" and are at least 3,
SELECT TOP 2 * FROM Customers ORDERY BY Liczbapunktów DESC       2 klintów o najwyzszej licznie punktów


SELECT DISTINCT year_of_birth FROM Customers 
WHERE year_of_birth IS NOT NULL 
ORDER BY year_of_birth DESC/ASC
LIMIT 0,5;

SELECT * FROM Customers WHERE CustomerID =
(SELECT CustomerID FROM Orders WHERE OrderDate = '1996-09-18')

SELECT * FROM Customers
JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

SELECT ShipperID, Count(CustomerID) from Orders 
GROUP BY ShipperID                                         //zrób grupy dla konkretnego ShipperID
HAVING Count(CustomerID)>60

GROUP BY - czyli zgrupuj po, najczesciej sie stosuje przy funkcach agregujacych jak np COUNT.
HAVING - filtrowanie w grupach, WHERE filtruj w wierszach

###################################SOAP/REST#############################################
http://216.10.245.166:8080/axis2/services/EmployeeManagementService?wsdl

SOAP(The Simple Object Access Protocol) - jest standardem w jakim porozumiewają sie serwisy miedzy sobą. W postaci XML.Najczęsciej do transportu uzywa HTTP. Niezalezne od jezyka programowania.
Wiadomosc SOAP składa się z Envelope, Header(optional), Body

WSDL(Webservice Description Language)- opisuje dany webservice. zawiera info o mozliwych operacjach, typach danych itd. WSDL to menu w restauracji, a SOAP to rozmowa(zamawianie).


W SOAPUI klikajac na project tworzymy TestSuite, potem dodajemy TCsa i w Test Steps tworzymy juz SOAP request. Klikajać PLUSIK mozemy dodac assertions
Mozemy odpalić strzaleczka calego TestSuite

Assertion Contains - czy tekst zawarty w respone
Assertion Not Contain - czy tekst nie zawarty w response
Assertion SOAP response - sprawdza czy odp zgodna z formatem SOAP
Assertion Valid HTTP Status Codes - podajesz np "200", sprawdza czy faktycznie 200 OK jest
Assertion Response SLA - max czas w jakim ma sie wykonać 
Assertion Sensitive Information Exposure - sprawdza czy jakis token wazny nie wyciekł

Assertion Xpath Match - expected result - wartosc, w Xpath Expression klikamy declare, zeby pobrac namespaces
np: //ns:getEmployeeDetailsResponse/ns:return/ns:age - mozemy kliknac "Select from current"
po "//" dajemy node czyli np //ns:age
exists(//ns:age), w expected dajemy true - sprawdzamy czy node istnieje
count(//ns:name), w expected dajemy 1 - sprawdzamy czy tylko 1 node istnieje
"Select from current" -> zaznaczamy Allow Wildcards i daną wartość zamieniamy na *(gwiazdkę) - oznacza to ze pod gwiazdką moze byc cokolwiek a i tak bedzie PASS 


Properties pointer syntax: ${#TestSuite#Name} ; ${#TestCase#age} ; ${#Project#id} ; ${nazwaProperties#namefromproperties}!!!! (nie ma hasha, bo to nie jest slowo KLUCZOWE z soapUI)

prawym przyciskiem i get data i wtedy mozemy wstawic pointer ktory zaczytuje properties

Test case -> Custom propierties -> plusik i dodajemy properties z poziomu TCsa, podobnie z poziomu test suite itd

mozna tez wczytac properties wchodzac np w testsuite -> Custom properties -> load from external file, musi byc rozszerzenie xxxx.properties format:
id=123
department=it

PROPERTIES transfer: 
dodajemy "property transfer" do Test Step, source:skad chcemy, property: response
Source -> potem deklarujemy namespace
//ns:name/text() <- pobieramy value (tekst)
Target -> property: request
//typ:employeeName

zaczytanie properties z requesta/respona z innego test step:
<typ:employeeName>${add#Request#//typ:addEmployee/typ:name/text()</typ:employeeName> - add to nazwa teststepsa, zauwaz ze nie ma # !!

AUTOMATION SOAP
w test steps dodajemy groovy script
context variable- zasieg tylko w tcsie
testRunner pozwala na dostep do zmiennych w calym projekcie
log.info "this is my first program" - wyswietlanie w konsolli

//zczytywanie i ustawianie 
context.expand('${#TestCase#name}'} - pobranie wartosci z properties
log.info testRunner.testCase.getPropertyValue("department") - wzieta wartosc z TCsa w ktorym jest skrypt
testRunner.testCase.testSuite.testCases['getEmployee'].getPropertyValue("id") - wchodzimy wyzej do testcase, potem wyzej do testsuite i bierzemy z niego testcase getEmployee
testRunner.testCase.testSuite.testCases['addEmployee'].setPropertyValue("age","123") - ustawiamy
testRunner.testCase.testSuite.project.getPropertyValue("projectVersion")

//Podmiana request zapytaniu SOAP, aby pozniej go uruchomic
import com.eviware.soapui.support.XmlHolder
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext
def name = testRunner.testCase.testSuite.testCases['addEmployee'].getPropertyValue("name")
def addreq= testRunner.testCase.TestSuite.testCases['addEmployee'].testSteps['add'].getPropertyValue("Request") 
def xmlAdd = new XmlHolder(addReq)
xmlAdd.setNodeValue("//typ:addEmployee/typ:name", name)
def finalXML= xmlAdd.getXml()
testRunner.TestCase.TestSuite.testCases["addEmployee"].testSteps["add"].setPropertyValue("Request",finalXML)

//uruchomienie innego TCsa ze skryptu groovy
def addTestStep = testRunner.testCase.TestSuite.testCases['addEmployee'].testSteps['add']
def contextAddEmployee = new WsdlTestRunContext(addTestStep)
addTestStep.run(testRunner, contextAddEmployee)

//weryfikacja czy dodany pracownik moze byc znaleziony przez get
def getResponse=  testRunner.testCase.testSuite.testCases["getEmployee"].testSteps["get"].getPropertyValue("Response")
def getResponseXml = new XmlHolder(getResponse)
def nameOfGetResponse = getResponseXml.getNodeValue("//ns:name")
assert nameOfGetResponse == name          (name to byla zmienna podawana przy addEmployee)

REST
endpoint - adres, gdzie hostowane jest API
resource map i search:  BaseURL/resource/QueryOrPath_Parameters   www.google.com/search , www.google.com/map

GET -pobieranie zasobu lub jego wyświetlenie, np. wyświetlenie formularza lub strony
Pobierania zasobu z określonego adresu.Parametry można przekazywac jedynie poprzez adres (np. ?nazwa=wartosc&nazwa2=wartosc2)
Request body-NIEDOZWOLONE

POST- uzywany do wysłania danych zapisanych jako pary klucz-wartość do serwera. Metoda ta pozwala przesyłać także pliki.
Parametry są przekazywane w ciele zapytania, można także przekazywać parametry poprzez adres (tak jak w metodzie GET)
Request body-OPCJONALNIE 

PUT- służy do zachowania obiektu przekazywanego w treści zapytania pod wskazanym adresem URL/zastępuje dany zasób
Request body-OPCJONALNIE 

DELETE- usuwa zbiór z podanego URLa
Request body-OPCJONALNIE 


The difference between POST and PUT is that PUT requests are idempotent. That is, calling the same PUT request multiple times will always produce the same result. In contrast, calling a POST request repeatedly have side effects of creating the same resource multiple times.
path parameter- parametr zawarty w URL. oddzielony od niego:  "/", a od qury parameter oddzielony "?". 
path parameter definiuje lokalizację resourca
query parameter-parametr uzywany do sortowania/filtrowania resourca

HEAD pobiera informacje o zasobie, stosowane do sprawdzania dostępności zasobu
OPTIONS informacje o opcjach i wymaganiach istniejących w kanale komunikacyjnym
TRACE diagnostyka, analiza kanału komunikacyjnego
CONNECT żądanie przeznaczone dla serwerów pośredniczących pełniących funkcje tunelowania
PATCH aktualizacja części danych

na poczatku robię sobie różne resource i wtedy robie sobie Test suite
Assertions wazne:
-Contains
-JSONPath existense match - np czy istnieje: "place_id" ,
-Valid HTTP Status Codes - np podajemy "200"
-JSON count - podajemy path i expected(ilosc)
-script assertion:
{
import groovy.json.JsonSlurper
def response = messageExchange.response.responseContent
def json = new JsonSlurper()
def jsonParser = json.parseText(response)
log.info jsonParser.place_id
assert jsonParser.status == "OK"
}
context.getTestCase().setPropertyValue("place_id","123321") - ustawianie properties na poziomie test case

mozemy w request body uzyć np:
{
    "place_id":"${#TestCase#place_id}"
}


JSON validations:
[] <- arrays 
{} <- objects
jest cos takiego jak json editor online(wpisac w google)

JSONpath match validation:
photos.perpage -> i w expected: 100
photos.photo[4].owner -> i w expected stringa
photos.photo[?(@.id == '52508613190')].title <- bierzemy title z obiktu o id xx ,[?(expression)], @ represents the current array item or object being processed , [?(<expression>)] (https://docs.hevodata.com/sources/engg-analytics/streaming/rest-api/writing-jsonpath-expressions/)
photos.photo[0].* <- wartosci z danego obiektu ( nie caly xml obiektu)

photos.photo[0].debit , expected false <-JSONPath existense match, zeby sprawdzic czy istnieje(a np ma null) 

-script assettion:
import groovy.json.JsonSlurper
boolean flag
def response = messageExchange.response.responseContent
def json = new JsonSlurper()
def jsonParser = json.parseText(response)

for(int i=0;i<jsonParser.size();i++){
	if (jsonParser.isbn[i]=="kurdassa"){
		flag=true;
	}
}
assert flag==true

Przyklad property transfer w REST:
Source: nazwa requesta , Property: Response , Path: JSONPath
photo.perpage
Target: np. TestSuite , Property: Stworzone property na poziomie TestSuite, path:XPath
NIC nie wpisujemy


INTERVIEW QUESTIONS
Webservice - aplikacja lub logika biznesowa do której jest dostep za pomocą protokołów internetowych jak np HTTP. Słuzy do wymiany danych pomiedzy np aplikacjami czy systemami. Pozwala komunikować się niezaleznie w jakim jezyku została napisala aplikacja (java js python czy cokolwiek)

REST(Representational state transfer) API(Application Programming Interface) - Rest to styl architektoniczny. Uzywamy metod HTTP aby dobrać się do resources: 
np GET POST PUT DELETE

API vs Webservice - Kazdy Webservice to API, ale nie kazde API to webservice. Webservice potrzebuje dostepu do sieci(online). API moze być tez offline. Jak udostepnimy publicznie do internetu API, bedzie to webservice.

WSDL- opisuje dany webservice. zawiera info o mozliwych operacjach, typach danych itd. WSDL to menu w restauracji, a SOAP to rozmowa(zamawianie).

Endpoint - adres, gdzie hostowane jest API

SOAPUI - Open source narzedzie do testowania API (SOAP i REST)

Jak dostać sie do properties na poziome TC:
-${#TestCase#Property_name}
- w groovy script: TestRunner.TestCase.getPropertyValue(Property_name)
- w assertion script: Context.getTestCase.getPropertyValue(Property_name)


PropertyTransfer- pozwala na przenoszenie properties np z API response do API request

Jakiego rodzaju skrypty sa wspierane przez SOAPUI - groovyScripting, javascript

Jakie assertions wspiera soapui
- xpath match, xquery match, contains, not contains, script assertions, http status code, Response SLA (czas), Security

Jakie są obiekty/metody script assertions window ?
Log, Context, messageExchange

Gdzie uzywamy TestRunner?
Za pomoca TestRunner mamy dostęp metod i properties z wszystkich leveli projektu: testcases,testsuites,project

Jakie inputy i outpoty wspiera REST API
XML i Json

Czym jest Mocking?
Mockowanie to symulowanie odpowiedzi jakiegoś serwisu, aby była zgodna z naszymi oczekiwaniami. Mozemy zmokować jakis serwis zeby przetestować jakiś inny, nad ktorym toczą sie ważne prace


API documentation wazne, bo opisuje jaka Metoda HTTP zostala zaprojektowana dla danego API

Techniki autentyfikacji w API:
-Session/Cookie based authentication - na podstawie sesji, cookies
-basic authentication - podawanie user i pasword normalnie
-digest authentication
-OAuth

Dlaczego API testing jest uznawana za najbardziej pasującą do testowania automatycznego?
-API testing jest "lekkie" nie potrzeba sie logowac przez frontend itd, zeby np dodac do bazy uzytkownika
-Niezalezne jezykowo
-oszczednosc czasu(brak Front endu)

Co sprawdzamy podczas testowania  API ?
-poprawnosc danych
-Sprawdzamy czas odpowiedzi
-sprawdzamy HTTP status code
-sprawdzamy error code w przypadku blędu API
-sprawdzamy autoryzacje
-performance testing, security testing

www.google.com/maps/123123?location=x.y
-----endpoint-/--resource-?--query_parameter
resource tak na prawde path parameter

Jakie są komponenty HTTP request?
-HTTP request method: POST PUT DELETE
-Base Uniform Resource Identifier(URI) - endpoint, miejsce gdzie API jest hostowane
-Resources i Parameters
-Headers - pozwalaja zawrzec w requescie dodatkowe informacje jak np Content-Type itd.
-Request body - to co chcemy przeslać, jakeis dane, wartosci 

API testing vs UI testing
w UI testach mamy frond end

Czy mozna uzyc POST zamiast PUT ?
TAK

Czym jest Payload w REST Webservice?
to inaczej request body, dane które dostarczamy(input data), najczesciej w postaci JSON

Czym jest REST Assured? 
Java library which can automate REST APIs

Jak powinnisny zdefiniowac informacje o API w REST assured?
all request details powinnismy zdefiniowac i wyslac do servera poprzez metody: GIVEN, WHEN, THEN

JSON serialization w REST assured?
Konwertowanie JAVA object do Request Body(Payload)

JSON deserialization w REST assured?
Konwertowanie Response body do JAVA object

JSON parsing techniques w REST assured?
-Json path
-Deserialization of Json uzywajac POJO classes

Jak wysłać załączniki do API uzywajac REST assured
MultiPart method

HTTP Response Codes
kody informacyjne – zaczynające się od cyfry 1
kody powodzenia – od cyfry 2
kody przekierowania – od cyfry 3
kody błędy aplikacji klienta – od cyfry 4
kody błędu serwera – od cyfry 5

Developer przypisuje kody, zatem do stworzonego zasobu(niby 201) moze dac 200 OK

200 OK - zasób działa poprawnie i serwer zwrócił oczekiwaną odpowiedź
201 Created - nowy zasób poprawnie stworzony
204 No content - sukces, brak zawartosci (moze byc uzyty np przy delete)
301 Moved permanently - strona internetowa lub dana zawartość została trwale zastąpiona innym zasobem 
400 Bad request - niepoprawne żądanie, które zostało odrzucone przez serwer
401 Unauthorized - request nie zawiera prawidłowego poświadczenia uwierzytelniającego
403 Forbidden - zawartość, do której użytkownik nie posiada uprawnień dostępu
404 Not found - żądany zasób nie istnieje
405 Method Not allowed - znaleziony zasób istnieje, ale klient użył niedozowolonej metody HTTP
408 Request timeout - serwer przekroczył limit czasu oczekiwania na pełne żądanie przeglądarki (np poprzez przeciazenie sieci)
409 Conflict - request nie moze byc ukonczony z powodu konfliktu
500 Internal server error - wewnętrzny błąd serwera, przez który zasób nie został dostarczony
503 Service unavailable - żądanie nie może być aktualnie wykonane przez problem z hostem.

przykład JSON path
courses[2].details.site


================POSTMAN===================
Create Workspace - na początku
Workspace- miejsce w ktorym utrzymyjemy wszystkie pliki (tcsy itd)
Create Collection
Collection - zawiera foldery i http requesty. Mozna uruchomić collection. Mozna zrobic Duplicate. Mozna export(zeby podzielić sie z innymi).

HTTP method:
PATCH - jak PUT, tyle ze updatuje część zasobu

Co Validujemy:
status code
time
size data
response body
cookies
headers

Dodajemy sobie request:
np POST , Body->raw->JSON

Mozna uruchomić całą kolekcję (podajemy iteracje, pliki(dane), delay)
Mozna sobie wyexportowac cala kolekcję do json





BACKLOG - spriorytetyzowana lista wszystkich zadan jakie powinny byc wykonany aby otrzymac produkt. zadania do zrobienia w przyszlych sprintach
TABLICA - przegląd, znajdują sie tu zadania jakie sa do zrobienia w aktualnym sprintcie, wyswietlane sa Kolumny (ETAPY) zadan (np do zrobinia , w toku, gotowe etc)
SCRUM to zwinne(AGILE) podejscie do tworzenia nowych produktów i usług. SCRUM opiera sie na malych przyrostach. DO projektu mozna przypisywac osoby i ich role. 
ROLE: 
Product owner - zarządza backlogiem, decyduje o kolejnosc wykonywanej pracy
Dev team - implementacja przyrostów 
Scrum master - odpowiedzialny za przestreganie procesu scrum,
 
Zespół dostarcza kolejne wersje(przyrosty) działającego produktu w których cyklach zwanych SPRINTami(przewaznie 2-4 tyg).
Planowanie SPRINTu- pierwsze spotkanie polegajace na planowaniu SPRINTu, wszystkie ROLE powinny brac udział
Daily Scrum -  spotkanie devów, max 15 min
Przegląd Sprintu - zespol scrumowy + interesariusze, odbywa sie po sprincie, przegląd co i jak zostało zrobione
Retrospekcja Sprintu - wyciagniecie wnioskow na przyszlosc, co mozna zrobic lepiej

TYPY ZGLOSZEN
-Bug
-Task - np zweryfikuj poprawność systemu rejestracji
-Subtask - np zweryfikuj zabezpieczenia w systemie rejestracji (task powyzej)
-Epic - duze zadanie, które bedzie wymagało podzielenia na mniejsze (Np remont łazienki, w ktorej sklad wchodzi ukladanie plytek itd), NIE JEST WIDOCZNE ANI W backlog, ANI na tablicy
-User Stories - to te mniejsze zadania z Epic. User stories powinno miec DoD (Definition of Done)- czyli co powinno zostac zrobione, aby uznac User Stories za wykonane, często jest w postaci checklisty

Do zgloszenia mozna przypisac osobę (ale nie trzeba)
np EPIC:
mozna dodac etykietę (taki tag)
mozna dodac start date, deadline
mozna dodac flage(important)
mozna ustawić "połączenie zgłoszen" - blocks, clones, duplicates, relates to , is duplicated by ....... itd
po stworzeniu mozna zmieniac status: do zrobienia, w trakcie

np User Story
mozna przypisac do konkretnego sprintu (jak nie, to wskoczy do backlog) 

Przy wyszukiwaniu zgloszen mozna wygnerowac raport HTML(mozna tez ustawic wczesniej filtry).

w zakładce KOD mozemy połączyć Jire z np GitHub,BitBucket itd.

w zakładce STRONY PROJEKTÓW, mozna umieszczac jakies szablony, notatki ze spotkan, wymagania produktu itd

w zakładce AUTOMATYZACJA mozna tworzyc nowe reguły jak np: Po ukonczeniu wszystkich zadan podrzednych -> przenies zadanie nadrzędne do ukonczonych

w zakładce WYDANIA możemy określać wydania produktu (np 1.0.2) i potem do zgloszeń można dodawać wersję wydania.

w zakładce PULPIT mozna stworzyc sobie pulpity :D Są tam jakies wykresy,statystyki, aktualne zadania, ostatnie aktywnosci


PRZEPLYW PRACY(flow) - są tam rózne statusy i można je dodawać/edytować np.: TO DO , IN PROGRESS , VERIFICATION, TO DEPLOY, DONE
wtedy w zgloszeniach pojawią nam sie różne statusy do ustawienia
Mozna w przeplywie pracy dodawac reguły np: jak przechodzi VERIFICATION -> TO DEPLOY, to automatycznie do zgloszenia przypisywana jest konkretna osoba

Można tworzyć nowe typy zgłoszeń.







ISTQB

Testujemy żeby obniżyć poziom ryzyka, żeby dopuścić produkt do odbioru, podnoszenie i zapewnienie jakości
Testowanie pozwala otrzymać informacje o jakości produktu, określeniu ryzyka, budowa zaufania.

Testowanie to nie jest (tylko) wykonanie testów – to tez wszystko to co jest przed i po.
Testowane to też planowanie, nadzorowanie, ustalanie waruknków, projektowanie zadań testowych, itd, itp.

Cele testowania:
Zapobieganie defektom (np przeglady dokumentacji, zapieganie wprowadzeniu usterek do kodu)
Znajdowanie usterek (zeby je naprawic)
ocena jakości oprogramowania (zeby dac info interesariuszom o ryzyku)

Testowanie gruntowne jest niewykonalne

Weryfikacja, a walidacja - Weryfikacja to sprawdzanie poprawnosci wzgledem specyfikacji, a walidacja to sprawdzanie poprawnosci z oczekiwaniami klienta/usera.
Poziom niezaleznosci: programista -> inny programista -> tester z tej samej firmy -> tester z innej firmy

Podstawowy proces testowy:
planowanie i nadzór nad testami
analiza i projektowanie testów
implementacja i wykonanie testów
ocena kryteriów zakończenia i raportowanie
czynności zamykające test



Projekt testu - proces przekształcania celów w warunki/przypadki
Podstawa testów - Dokumentacja, na podstawie której oparte są przypadki testowe
Obiekt testów - to co testujemy
Plan testów - opisuje zakres, harmonogram, kto bedzie testował(zasoby), środowisko testowe, kryteria wejscia/wyjscia
Strategia testów - ogolne podejście do testowania. 
Testalia: Wszystkie dokumenty i narzędzia wytworzone i używane podczas procesu testowania niezbędne do planowania, projektowania i wykonywania testów.

Software Development Life Cycle (SDLC) - jest usystematyzowanym podejściem do tworzenia, rozwoju oraz wycofywania danego programowania.
Analiza->Projektowanie->Implementacja->Testowanei->Wdrozenie->Utrzymanie

Software Testing Life Cycle (STLC)
Analiza wymagań->Planowanie testów->Pisanie TCsow->Przygotowanie środowiska->Wykonanie testow->Zamkniecie

Modele wytwarzania oprogramowania:
Model Kaskadowy(waterfall) (Planowanie->Analiza->Projektowanie->Implementacja->Testowanie->Pielegnacja)
Model iteracyjno-przyrostowy (bazuje na podstawie koncepcji podziału całego przedsięwzięcia wytwórczego na krótsze cykle rozwojowe – ITERACJE. Każda iteracja reprezentuje mini-cykl wytwarzania)
Model V (Do każdego poziomu wytwarzania, przypisane sa odpowiednie aktywnosci weryfikacji/testowania)  
Poziomy np:
-Testy Modułowe(jednostkowe) - unit tests, testujemy:moduły,programy,klasy (rzeczy które mozna testowac oddzielnie)
-Testy Integracyjne (Testy integracyjne sprawdzają interfejsy pomiędzy modułami, interakcje z innymi częściami systemu)
-Testy Systemowe (Testy systemowe zajmują się zachowaniem systemu/produktu)
-Testy akceptacyjne (Testy akceptacyjne zwykle oceniają gotowość systemu do wdrożenia i użycia. Celem testów akceptacyjnych jest nabranie zaufania do systemu, jego części)

Smoke Testy - Smoke to jak podlaczenie nowo stworzonego urzadzenia do pradu i sprawdzenie czy nie wydostaje się dym (czy w ogole krytyczne funkcje oprogramowania działają), sprawdzenie czy produkt nadaje się do testowania
Sanity Testy - to juz bardziej szczegolowe testowanie niz Smoke, przeprowadzane np po wprowadzeniu poprawek i aktualizacji oprogramowania.

Testy Alfa i Beta -to testy Akceptacyjne, Alfa to testy u producenta, ale nie przez zespol projektowy, Beta wykonywane są przez klientów lub potencjalnych klientów w ich własnych lokalizacjach.

Typy testów:
Funkcjonalne - testy tego "co" produkt "robi", a nie "jak"
Niefukcjonalne  - testy np wydajnosciowe, obciążeniowe, niezawodności, przenaszalności
Strukturalne - bialoskrzynkowe
Związane ze zmianami - regresji i retesty

Testy Czarnoskrzynkowe- oparte na specyfikacji testy zewnętrzne, bez znajomości wewnętrznej struktury modułu lub systemu. (Moze byc funkcjonalne i niefunkcjonalne)
Testy Bialoskrzynkowe- testy oparte na analizie wewnętrznej struktury modułu lub systemu.
Retest- test potwierdzajacy usuniecie usterki
Regresja- testy po modyfikacjach, czy cos sie nie zepsulo w niezmienionej cześci oprogramowania
Testowanie statyczne- bez uruchamiania programu (np przegląd dokumentacji), 
Testowanie dynamizcne- z uruchamianiem programu
Testowanie pielegnacyjne- testowanie zmian we wdrożonym systemie lub testowanie wpływu zmienionego środowiska na wdrożony system.
Analiza statyczna- kod jest analizowany przez np program zewnetrzny, ale sam testowany program nie jest uruchamiany

Usterki znalezione podczas przeglądów we wczesnych
fazach produkcji oprogramowania (np. defekty znalezione w wymaganiach) często okazują
się dużo tańsze do usunięcia niż te wykryte podczas wykonywania testów dynamicznych.

Przegląd formalny - Przegląd charakteryzujący się udokumentowanymi procedurami i wymaganiami
Przegląd nieformalny -  Przegląd, który nie jest oparty na formalnej (udokumentowanej) procedurze.
Przejrzenie - prowadzone przez autora, kilka osób
Przeglad techniczny - bez biznesu, eksperci 
Inspekcja - obowiazkowo protokół, prowadzi moderator, nie autor

Dokumentacja podstawy testów -> Warunki testowe -> Przypadki testowe -> Procedury testowe

Testy oparte na doświadczeniu - wiedza o prawdopodobnych defektach, zgadywanie bledów
Teksty eksploracyjne - wiadomo

CZARNOSKRZYNKOWE
Klasy równoważności - wejscia programu dzielona na grupy(powodujące podobne dzialanie programu) np 0-5 ma dziac sie to, 5-10 ma dziac sie tamto
Analiza wartosci brzegowych - podajemy wartosci brzegowe jako input (granice klas rownowaznosci)
Tablica decyzyjna - dostajemy tablicę i na jej podstawie testujemy
Przejscia miedzy stanami - dostajemy diagram przejść stanów i na tej podstawie testujemy 
W oparciu o przypadek uzycia - najbardziej prawdopodobne rzeczywiste uzycie 


BIALOSKRZYNKOWE
Pokrycie intrukcji- odsetek instrukcji wykonywalnych został przetestowany przez zestaw testów
Pokrycie decyzji- jaki odsetek wyników decyzji (np. wyniku prawda lub fałsz instrukcji if) został przetestowany przez zestaw testów.
Pokrycie warunkow- jaki odsetek warunków, jaki został sprawdzony przez zestaw testów. 100% pokrycia warunków wymaga, aby każdy pojedynczy warunek każdego wyrażenia decyzyjnego został przetestowany zarówno dla wartości Prawda jak i Fałsz. 
LSKiS
Przeplywy danych


Warunki wejścia (warunki rozpoczęcia testów):
Dostępność i gotowość środowiska testowego 
gotowość narzędzi testowych w środowisku 
dostępność testowalnego kodu i danych testowych

Warunki Wyjścia (zakonczenia testow)
Estymacja gestosci bledow lub miar niezawodnosci
Istniejące ryzyko
Harmonogram


Ryzyko projektowe –ryzyko otaczające zdolność projektu do osiągnięcia postawionych przez nim celów (techniczne, z dostawcami, itp, opoznienia)
Ryzyko produktowe  - ryzyko awarii w oprogramowaniu, stanowiące ryzyko dla jakości 

Macierz Sledzenia - Dzięki macierzy śledzenia możliwe jest określenie, w jakim stopniu stawiane wymagania zostały spełnione.(Jakie wymagania zostały przetestowane przez jakie TCsy)

Przykład Narzedzi do testowania wydajności - Apache JMeter.

Jak programista powie "u mnie działa" - sprawdzamy czy taka sama wersja oprogramowania, pokazujemy filmik 
Testowanie Ad-hoc - tester próbuje złamać system, losowo wypróbowując jego funkcjonalność.

Bug leakage/bug release - kiedy uzytkownik lub klient odkrywa ze bug istnieje

Data Driven Testing - input i expected result umieszczone np w Excelu, i automat wykonuje wszystkie tcsy
Test Driven Development - przygotowanie test casów przed napisaniem kodu aplikacji.




--------------------------------
json server - bardzo szybko testowe api sie stawia

co velidujemy w POSTMANie:
Status code
headers
cookies
response time
response body
JSON schema - strukture json, sprawdzamy informacje o typach danych (czy string, czy integer itd), mozna generowac(json schema generator)

pm - biblioteka w postmanie do validacji:
Jesli w ramach jednego pm.test mamy kilka expect , to wystarczy ze wywali sie choc jeden expect, to caly test jest na fail


Normal function
pm.test("Test name, Status code is 200", function () {
  pm.response.to.have.status(200);
});

Arrow function 
pm.test("Test name,Status code is 200", () =>
{
  pm.response.to.have.status(200);
});

pm.test("Jeden z wielu status code", ()=>
{
	pm.expect(pm.response.code).to.be.oneOf([200,201]);
});

pm.test("Sprawdzamy string", ()=>
{
	pm.response.to.have.status("Created");
});

SPRAWDZANIE HEADERSÓW
pm.test("Sprawdzamy Content-Type present czy nie" , ()=>
{
	pm.response.to.have.headers("Content-Type");
});

pm.test("Sprawdzamy Content-Type czy wartosc prawidlowa" , ()=>
{
	pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');
});

SPRAWDZANIE COOKIES
pm.test("Czy w cookies  jest "language" present" , ()=>
{
	pm.expect(pm.cookies.has('language')).to.be.true;
});

pm.test("Czy cookies language present" , ()=>
{
	pm.expect(pm.cookies.get('language')).to.eql('en-gb');
});

SPRAWDZANIE CZASU
pm.test("time less than 200ms" , ()=>
{
	pm.expect(pm.response.responseTime).to.be.below(200);
});

SPRAWDZNIE RESPONSE BODY
const jsonData = pm.response.json();              //zmienna globalna, bo nie w srodku funkcji
pm.test("Test data types of the response", ()=>
{
pm.expect(jsonData).to.be.an("object");
pm.expect(jsonData.name).to.be.a("string");
pm.expect(jsonData.id).to.be.a("number");
pm.expect(jsonData.courses).to.be.an("array");
});

pm.test("Test array properties", ()=>
{
pm.expect(jsonData.courses).to.include("Java"); //cos w stylu contains
pm.expect(jsonData.courses).to.have.members(["Java", "Selenium"]); // musi posiadac tych kilka konkretnych
});

pm.test("konkretne pola", ()=>
{
var jsonData = pm.response.json(); 		//zmienna lokalna
pm.expect(jsonData.courses[1]).to.eql("Java");
});

PRE-request script - scrypty uruchamiane przed wykonaniem requesta
Pre-request script ---> request ---> response ---> tests

cel: np zeby dynamicznie wygenerowac sobie dane do POST

3 levele prerequest scipt i 3 levele tests:
collection
folder
request

collection pre_req_script -> folder pre_req_script -> requst pre_req_script -> REQUEST -> RESPONSE -> collection test -> folder test -> request test


Variables in POSTMAN - zeby przechowywac dane, zeby nie duplikowac danych

Scope of variables:
Global - zmienna dostepna wszedzie w calym workspace(kolekcje, foldery, requesty.... )
Collection - zmienna dostępna w konkretnym collection
Environment - zmienne dla roznych działów np: DEV, QA, PROD.  np zmienan URL bedzie dla kazdego environment inna. ACCESS tez globalny
Local
data

{{url_global}} <-- syntax
global - po prawej na gorze ikonka (initial i current dajemy takie samo)

collection - 3 kropeczki w collection i edit -> variables

environment - tworzymy tak jak global, ale zeby uzywac zmiennych z environment, musimy przelaczyc sie na konkretne środowisko(environment),
przed stworzeniem zmiennej environment, trzeba stworzyc sam environment

local - zmienna tworzona w pre_req_script, access tylko w tym konkretnym requescie
pm.variables.set("url_local","https://reqres.in");
i teraz mozemy uzywac url_local tak samo(ten sam syntax)

data- w plikach zewnetrznych

------Zmienne global mozna stworzyć poprzez pre_req_script, po wykonaniu requesta, taka zmienna normalnie dodaje sie do zmiennych globalnych
pm.globals.set("user_id_global","323");
------podobnie ze zmiennymi environment
pm.environment.set("user_id_qa_env","2"); <- tworzy sie w takim environmentcie na jaki jestesmy przelaczeni
------podobnie ze zmiennymi collection
pm.collectionVariables.set("user_id_collect","2"); <-- tworzy sie w konkretnym collection

usuwanie zmiennych np w zakładce tests ( czyli po wykonaniu requesta i otrzymaniu response):
pm.globals.unset("user_id_global")

pobieranie zmiennych np w zakladce tests:
console.log((pm.globals.get("user_id_global"));



####################API chaining - dane z response(z API1) są uzywane do nastepnego requesta(z API2)############### do testów: https://gorest.co.in

//utworzenie zmiennej z responsebody
var jsonData= JSON.parse(responseBody);
pm.environment.set("id", jsonData.id);

w requescie jest zakladka authorization , sluzy do przekazywania kluczy (chyba w headerze pozniej)
np: API key, Bearer Token, OAuth 1.0, OAuth 2.0, AWS signature itd....
Mozna zrobic tez authorization na poziomie collection np, wtedy bedzie dla calego collection, wszystkich requestów@!! (potem w samuch requestach bierzemy auth -> inherit)
Można tez zrobic variable collection i wtedy sobie w tym requescie ktorym chcemy uzywac {{nazwa_tokena}}



w pre req script: <- generowanie randomowego emaila i utworzenie zmiennej
var random = Math.random().toString(36).substring(2);
var useremail ="jim"+random+"@gmail.com";
pm.environment.set("useremail_env", useremail")

potem juz w body requescie daje
"email":"{{useremail_env}}",

teraz z id z reponse tworze zmienna:
var jsonData=JSON.parse(responseBody);
pm.environment.set("userid_env", jsonData.id);


teraz sprawdzam czy dane z create user zgadzaja sie z getuser
pm.tes("values of json fields",()=>{
var jsonData=pm.response.json();
var userIDfromResponse = pm.globals.get("userid_env")

pm.expect(jsonData.id).to.eql(userIDfromResponse);
pm.expect(jsonData.email).to.eql(pm.environment.get("useremail_env"));
});

po requescie warto pousuwac wszystkie powstane zmienne environment, usuwamy je w test w ostatnim requescie:
pm.environment.unset("useremail_env");
pm.environment.unset("userid_env");

jak uruchamiamy requesty z calej collection to warto dac delay(np 2 sekundy)


Jak robic request pobierajac dane z excela(.cvs rozszerzenie) lub JSON:
robimy run collection
iterations - ile razy mamy uruchomić całą collection
ładujemy plik(np excel 2 kolumny z tytulami: BookID i CustomerName i pod spodem dane)
w saym requescie jak podajemy dane to muszą się nazywac tak samo jak kolumma
np w POST
{
"idbook":"{{BookID}}",
"customer":{{CustomerName}}"
}



############### FILE UPLOAD API

request (np POST) ->body -> form-data -> tworzymy zmienna "file" i zmieniamy na typ file -> wczytujemy plik
jeżeli ustawimy typ "text" to podajemy sciezke do pliku

te pliki^ bedą szły w header

################ AUTHENTICATION

API Key - wygenerowanie klucza
Bearer Token - Token uzywany do authentyfikacji
Basic Auth - username i password (nie bedzie zaszyfrowane)
Digest Auth - username i password (zaszyfrowane bedzie)
OAuth 1.0 - 3rd party auth
OAuth 2.0 - 3rd party auth , 2.0 nowszy 
Hawk Authentication
AWS Signature
NTLM Authentication
Akamal EdgeGrid - te 4 ostatnie to zaawansowane

BASIC i DIGEST jak dziala - requestujemy o resourca, server prosi o username i password, wysylamy username i password , otrzymujemy requestowanego resourca
 
 box "Yes, disable retrying the request" odznaczyć

API key - geenrujemy sobie w swoim API , w requescie w authorization dajemy API key, Key - [nazwa klucza podana przez api] , Value - sam klucz, Add to- Query parameters

OAuth2 na przykladzie github:
Request GET z podanym client_id(wygenerowanym po zalogowaniu do github) , (wklejajac URI requesta w przegladarce dostaniemy code w linku - ?? )
potem wysylamy POST z clinet_id(^^), code z pop. response, secret_id(tez wygenerowane na github po zalogowaniu), response ma access_token 

Swagger- Interaktywna dokumentacja, są tam możliwe API requesty które są opisne, mozna też kliknąć Try it out, i uruchomic request (normalnie dostajemy response), 
w requestach normalnie mozemy podawac parametry
exploring, not testing purpose, nie ma validations w swagger

cURL - client URL, mozna przez cURL wysylac requesty w jednej linijce np:
	curl -X DELETE http://localhost:8082/spring-rest/foos/9
Swagger po wykonaniu requesta wyswietla gotowy cURL
w Postmanie mozemy zimportowac cURL: Import -> Raw text -> wklejamy curl


W postman mozemy kliknac na kolekcję i view documentation
majac dokumentację mozemy klikanc publish, tam bedzie URL 
w taki URL mozemy sobie wejsc i kliknac RUN IN POSTMAN (odpala sie wtedy import collection)

respponses w XML mozemy sobie skonwertowac do json:
var jsonData = xml2Json(responseBody);

jsonpathfinder.com
W pre-req script i w test uzywamy pm.enviroment itd, a w body uzywamy {{asdasd}}

jezeli np potrzebujemy podac api key (token jakis) i dodamy go w authorization tabie(wybrac opcje query param) to podobno sam automatycznie sie doda w params i podobno tez na odwrot(DO SPRAWDZENIA)

niektore api wspieraja body form-data, niektóre json itd...







